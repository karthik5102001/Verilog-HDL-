$date
	Sun Sep 17 18:47:57 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alutest $end
$var wire 16 ! z [15:0] $end
$var wire 1 " carry $end
$var reg 1 # cin $end
$var reg 16 $ x [15:0] $end
$var reg 16 % y [15:0] $end
$scope module alu1 $end
$var wire 1 # c1 $end
$var wire 16 & x [15:0] $end
$var wire 16 ' y [15:0] $end
$var wire 16 ( z [15:0] $end
$var wire 1 " carry $end
$var wire 3 ) c [2:0] $end
$scope module a1 $end
$var wire 16 * a [15:0] $end
$var wire 16 + b [15:0] $end
$var wire 1 # cin $end
$var wire 16 , sum [15:0] $end
$var wire 1 - carry $end
$var wire 1 . c3 $end
$var wire 1 / c2 $end
$var wire 1 0 c1 $end
$scope module fa1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 # cin $end
$var wire 1 0 cout $end
$var wire 1 3 sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 4 a $end
$var wire 1 5 b $end
$var wire 1 0 cin $end
$var wire 1 / cout $end
$var wire 1 6 sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 / cin $end
$var wire 1 . cout $end
$var wire 1 9 sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 . cin $end
$var wire 1 - cout $end
$var wire 1 < sum $end
$upscope $end
$upscope $end
$scope module a2 $end
$var wire 16 = a [15:0] $end
$var wire 16 > b [15:0] $end
$var wire 1 ? cin $end
$var wire 16 @ sum [15:0] $end
$var wire 1 A carry $end
$var wire 1 B c3 $end
$var wire 1 C c2 $end
$var wire 1 D c1 $end
$scope module fa1 $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 ? cin $end
$var wire 1 D cout $end
$var wire 1 G sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 D cin $end
$var wire 1 C cout $end
$var wire 1 J sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 C cin $end
$var wire 1 B cout $end
$var wire 1 M sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 B cin $end
$var wire 1 A cout $end
$var wire 1 P sum $end
$upscope $end
$upscope $end
$scope module a3 $end
$var wire 16 Q a [15:0] $end
$var wire 16 R b [15:0] $end
$var wire 1 S cin $end
$var wire 16 T sum [15:0] $end
$var wire 1 U carry $end
$var wire 1 V c3 $end
$var wire 1 W c2 $end
$var wire 1 X c1 $end
$scope module fa1 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 S cin $end
$var wire 1 X cout $end
$var wire 1 [ sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 X cin $end
$var wire 1 W cout $end
$var wire 1 ^ sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 W cin $end
$var wire 1 V cout $end
$var wire 1 a sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 V cin $end
$var wire 1 U cout $end
$var wire 1 d sum $end
$upscope $end
$upscope $end
$scope module a4 $end
$var wire 16 e a [15:0] $end
$var wire 16 f b [15:0] $end
$var wire 1 g cin $end
$var wire 16 h sum [15:0] $end
$var wire 1 " carry $end
$var wire 1 i c3 $end
$var wire 1 j c2 $end
$var wire 1 k c1 $end
$scope module fa1 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 g cin $end
$var wire 1 k cout $end
$var wire 1 n sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 k cin $end
$var wire 1 j cout $end
$var wire 1 q sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 j cin $end
$var wire 1 i cout $end
$var wire 1 t sum $end
$upscope $end
$scope module fa4 $end
$var wire 1 u a $end
$var wire 1 v b $end
$var wire 1 i cin $end
$var wire 1 " cout $end
$var wire 1 w sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
bzxxxx h
xg
b0xxxx f
b0xxxx e
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
bzxxxx T
xS
b0xxxx R
b0xxxx Q
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
bzxxxx @
x?
b0xxxx >
b0xxxx =
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
bzxxxx ,
b0xxxx +
b0xxxx *
bx )
bx (
bx '
bx &
bx %
bx $
x#
x"
bx !
$end
#50
0n
0g
0U
1d
0V
1a
0W
1^
0X
bz1111 T
1[
0S
0A
1P
0B
1M
0C
1J
0D
bz1111 @
1G
0?
b0 )
0-
1<
0.
19
0/
16
0q
0t
bz0000 h
0w
b111111111111 !
b111111111111 (
00
0k
0j
0i
1"
bz1111 ,
13
02
05
08
0;
0F
0I
0L
0O
0Z
0]
0`
0c
0m
0p
0s
1v
11
14
17
1:
1E
1H
1K
1N
1Y
1\
1_
1b
0l
0o
0r
1u
b0 +
b0 >
b0 R
b1000 f
b1111 *
b1111 =
b1111 Q
b1000 e
0#
b1000000000000000 %
b1000000000000000 '
b1000111111111111 $
b1000111111111111 &
#100
0/
0"
09
0<
0G
0J
0M
bz0000 @
0P
0[
0^
0a
bz0000 T
0d
16
b11 !
b11 (
00
15
0v
01
04
07
0:
0E
0H
0K
0N
0Y
0\
0_
0b
0u
bz0011 ,
13
b10 +
b0 f
b0 *
b0 =
b0 Q
b0 e
1#
b10 %
b10 '
b0 $
b0 &
#150
b101010101010111 !
b101010101010111 (
bz0111 ,
19
1G
bz0101 @
1M
1[
bz0101 T
1a
1n
bz0101 h
1t
10
12
05
18
1F
1L
1Z
1`
1m
1s
11
b101 +
b101 >
b101 R
b101 f
b1 *
b101010101010101 %
b101010101010101 '
b1 $
b1 &
#200
09
bz0001 @
0M
bz0001 T
0a
bz0001 h
0t
b1000100010010 !
b1000100010010 (
08
0L
0`
0s
bz0010 ,
03
b1 +
b1 >
b1 R
b1 f
0#
b1000100010001 %
b1000100010001 '
#300
1"
1i
1j
1k
0n
1g
1U
1V
1W
1X
0[
1S
1A
1B
1C
1D
0G
1?
b111 )
1-
1.
1/
06
09
0<
0J
0M
bz0000 @
0P
0^
0a
bz0000 T
0d
0q
0t
bz0000 h
0w
b0 !
b0 (
15
18
1;
1I
1L
1O
1]
1`
1c
1p
1s
1v
01
bz0000 ,
03
b1111 +
b1111 >
b1111 R
b1111 f
b0 *
1#
b1111111111111111 %
b1111111111111111 '
b0 $
b0 &
#350
